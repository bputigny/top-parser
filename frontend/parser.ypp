%{
#include "IR.h"
#include "SymTab.h"
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

extern "C" {
#include <unistd.h>
}

#include "parser.hpp"
#include "IR.h"
#include "Coord.h"
#include "FrontEnd.h"
#include "Printer.h"
#include "config.h"
#
extern int yylineno;
extern int yylex();
extern int yyerror(const char *s);

int parse_eq = 0;
ir::Program *prog = NULL;

SymTab *progParams = NULL;

extern std::string *filename;

SphericalCoord spherical;

#define SRC_LOC (*filename + ":" + std::to_string(yylineno));

%}

%union {
    int num;
    double real;
    std::string *str;

    ir::Node *node;
    ir::Expr *expr;
    ir::IndexRange *indexRange;
    ir::ExprLst *exprLst;
    ir::Value<int> *intValue;
    ir::Value<float> *floatValue;
    ir::Equation *eq;
    ir::BC *bc;
    ir::Decl *decl;
    ir::DeclLst *declList;
    ir::EqLst *eqList;
    ir::BCLst *bcList;
    ir::Program *program;
    ir::Param *param;
    std::vector<ir::Identifier *> *idList;
}

%token <real> REAL
%token <num> NUM
%token <str> ID KW_TYPE

%token KW_LET KW_IN KW_WITH KW_AT KW_EQ
%token KW_PARAM KW_VAR KW_LAMBDA KW_FIELD KW_SCAL
%token KW_DIV KW_GRAD KW_CROSS

%type<expr> expr primary_expr postfix_expr unary_expr factor const

%type<bc> bc
%type<decl> declaration
%type<eq> equation_def equation equation_with_bc
%type<indexRange> index

%type<eqList> equation_list
%type<bcList> bc_list
%type<declList> declaration_list
%type<exprLst> arg_list index_list
%type<program> program
%type<idList> var_names

%%

program
: declaration_list KW_IN equation_list
                                    { $$ = new ir::Program(*filename, progParams, $1, $3);
                                      prog = $$;
                                    }
;

declaration_list
: declaration_list declaration      { $$ = $1; if ($2) $$->push_back($2); }
| declaration                       { $$ = new ir::DeclLst();
                                      if ($1) $$->push_back($1); }
;

equation_list
: equation_list equation_def        { $$ = $1; $$->push_back($2); }
| equation_def                      { $$ = new ir::EqLst();
;                                     $$->push_back($1); }

bc_list
: bc_list bc                        { $$ = $1; $$->push_back($2); }
| bc                                { $$ = new ir::BCLst();
;                                     $$->push_back($1); }

declaration
: postfix_expr '=' expr             { $$ = new ir::Decl($1, $3); }
| param_list                        { $$ = NULL; /* do nothing */ }
;

param_list
: KW_PARAM KW_TYPE var_names        { if (progParams == NULL) progParams = new SymTab();
                                      for (auto n: *$3) {
                                          progParams->add(new ir::Param(n->name, *$2));
                                          delete n;
                                      }
                                      delete $3;
                                    }

| KW_VAR var_names                  { if (progParams == NULL) progParams = new SymTab();
                                      for (auto n: *$2) {
                                          progParams->add(new ir::Variable(n->name,
                                              n->vectComponent));
                                          delete n;
                                      }
                                      delete $2;
                                    }
| KW_FIELD var_names                { if (progParams == NULL) progParams = new SymTab();
                                      for (auto n: *$2) {
                                          progParams->add(new ir::Field(n->name));
                                          delete n;
                                      }
                                      delete $2;
                                    }
| KW_SCAL var_names                 { if (progParams == NULL) progParams = new SymTab();
                                      for (auto n: *$2) {
                                          progParams->add(new ir::Scalar(n->name));
                                          delete n;
                                      }
                                      delete $2;
                                    }
;

var_names
: var_names ',' ID                  { $$ = $1; $$->push_back(new ir::Identifier(*$3));
                                      delete $3; }
| ID                                { $$ = new std::vector<ir::Identifier *>();
                                      $$->push_back(new ir::Identifier(*$1));
                                      delete $1; }
| '(' ID ',' ID ',' ID ')'          { $$ = new std::vector<ir::Identifier *>();
                                      $$->push_back(new ir::Identifier(*$2, 1));
                                      $$->push_back(new ir::Identifier(*$4, 2));
                                      $$->push_back(new ir::Identifier(*$6, 3));
                                      delete $2, delete $4, delete $6; }
| var_names ',' '(' ID ',' ID ',' ID ')' {
                                      $$ = $1;
                                      $$->push_back(new ir::Identifier(*$4, 1));
                                      $$->push_back(new ir::Identifier(*$6, 2));
                                      $$->push_back(new ir::Identifier(*$8, 3));
                                      delete $4, delete $6, delete $8; }
;

expr
: factor                            { $$ = $1; }
| expr '+' factor                   { $$ = (*$1 + *$3).copy();
                                      delete $1, delete $3;
                                      $$->srcLoc = SRC_LOC;
                                    }
| expr '-' factor                   { $$ = (*$1 - *$3).copy();
                                      delete $1, delete $3;
                                      $$->srcLoc = SRC_LOC;
                                    }
;

factor
: unary_expr                        { $$ = $1; }

| factor '*' unary_expr             { $$ = (*$1 * *$3).copy();
                                      delete $1, delete $3;
                                      $$->srcLoc = SRC_LOC;
                                    }
| factor '.' unary_expr             { $$ = new ir::BinExpr(ir::dotProduct(*$1, *$3));
                                      delete $1, delete $3;
                                      $$->srcLoc = SRC_LOC;
                                    }

| factor '/' unary_expr             { $$ = (*$1 / *$3).copy();
                                      delete $1, delete $3;
                                      $$->srcLoc = SRC_LOC;
                                    }
;

unary_expr
: postfix_expr                      { $$ = $1; }
| unary_expr '^' unary_expr         { $$ = (*$1 ^ *$3).copy();
                                      delete $1, delete $3;
                                      $$->srcLoc = SRC_LOC;
                                    }
| '-' unary_expr                    { if (isScalar($2)) {
                                        $$ = (-scalar(*$2)).copy();
                                      }
                                      else {
                                        $$ = (-vector(*$2)).copy();
                                      }
                                      delete $2;
                                      $$->srcLoc = SRC_LOC; }
| unary_expr '\''                   { if (auto se = dynamic_cast<ir::ScalarExpr *>($1)) {
                                          $$ = new ir::UnaryExpr(se, '\'');
                                          $$->srcLoc = SRC_LOC;
                                      }
                                      else {
                                          yyerror("derivative of vector expression");
                                      }
                                    }
;

postfix_expr
: primary_expr                      { $$ = $1; }
| ID '[' index_list ']'             { $$ = new ir::ArrayExpr(*$1, $3);
                                      delete $1, delete $3;
                                      $$->srcLoc = SRC_LOC;
                                    }
| ID '('  arg_list  ')'             { $$ = new ir::FuncCall(*$1, $3);
                                      delete $1;
                                      $$->srcLoc = SRC_LOC;
                                    }
| KW_DIV '(' expr ')'               { $$ = new ir::BinExpr(spherical.div(*$3));
                                      delete $3;
                                      $$->srcLoc = SRC_LOC;
                                    }
| KW_GRAD '(' expr ')'              { $$ = new ir::VectExpr(spherical.grad(*$3));
                                      delete $3;
                                      $$->srcLoc = SRC_LOC;
                                    }
| KW_CROSS '(' expr ',' expr ')'    { if (!isVect($3) || !isVect($5))
                                          yyerror("cross product can only be applied to vectors");
                                      $$ = new ir::VectExpr(ir::crossProduct(*$3, *$5));
                                      delete $3, delete $5;
                                      $$->srcLoc = SRC_LOC;
                                    }
| ID '('          ')'               { $$ = new ir::FuncCall(*$1);
                                      $$->srcLoc = SRC_LOC;
                                    }
| '[' expr ',' expr ',' expr ']'    { if (!isScalar($2) || !isScalar($4) || !isScalar($6))
                                        yyerror("building vector from non scalar expression");
                                        $$ = new ir::VectExpr(
                                        scalar($2),
                                        scalar($4),
                                        scalar($6));
                                      $$->srcLoc = SRC_LOC;
                                    }
;

primary_expr
: ID                                { $$ = new ir::Identifier(*$1);
                                      delete $1;
                                      $$->srcLoc = SRC_LOC; }
| KW_LAMBDA                         { $$ = new ir::Identifier("fp");
                                      $$->srcLoc = SRC_LOC; }
| const                             { $$ = $1; }
| '(' expr ')'                      { $$ = $2; }
;

arg_list
: expr                              { $$ = new ir::ExprLst(); $$->push_back($1);
                                      /* $$->srcLoc = SRC_LOC; */ }
| arg_list ',' expr                 { $$ = $1; $$->push_back($3); }
;

index_list
: index                             { $$ = new ir::ExprLst(); $$->push_back($1); }
| index_list ',' index              { $$ = $1; $$->push_back($3); }
;

index
: NUM                              { ir::Value<int> *idx = new ir::Value<int>($1);
                                     $$ = new ir::IndexRange(
                                                idx,
                                                idx);
                                   }
| NUM ':' NUM                      { $$ = new ir::IndexRange(
                                                new ir::Value<int>($1),
                                                new ir::Value<int>($3));
                                   }
| ':'                              { $$ = new ir::IndexRange(
                                                new ir::Value<int>(0),
                                                new ir::Value<int>(-1));
                                   }
;

const
: NUM                               { $$ = new ir::Value<int>($1); }
| REAL                              { $$ = new ir::Value<float>($1); }
;

equation
: expr '=' expr                     { $$ = new ir::Equation("undef", $1, $3, NULL); }
;

equation_def
: KW_EQ ID ':' equation_with_bc     { $$ = new ir::Equation(*$2, *$4);
                                      delete $2, delete $4;
                                      std::cout << "new equation: " << ir::Node::getNodeNumber() << " nodes\n";
                                    }
;

equation_with_bc
: equation bc_list                  { $$ = $1; $$->setBCs($2); }
| equation                          { $$ = $1; }
;

bc
: KW_WITH '(' ID '=' const ')' equation KW_AT equation
                                    {
                                      $$ = new ir::BC($7, $9);
                                      $$->setEqLoc((int)((ir::Value<int> *)$5)->getValue());
                                    }
;

%%

int yyerror(const char *s) {
    err <<  "Error at " << *filename << ":" << yylineno << ": "
        << s << "\n";
    exit(1);
}

